- op: replace
  path: /data/jupyterhub_config.py
  value: |
    def pvc_mounts(spawner,pod):
      # Apply profile from singleuser-profiles
      apply_pod_profile(spawner, pod)

      # Get private_users and secret_users lists, plus admins for R/W access
      private_users=spawner.single_user_profiles.read_config_map('jupyterhub-groups','private_users')
      secret_users=spawner.single_user_profiles.read_config_map('jupyterhub-groups','secret_users')

      # Set R/W mode only for admins
      admins=spawner.single_user_profiles.read_config_map('jupyterhub-groups','admins')
      readOnly_flag = False if spawner.user.name in admins else True

      # Mount volumes according to membership
      # Public (no membership test)
      pod.spec.volumes.append(dict(name='data-public',persistentVolumeClaim=dict(claimName='jupyterhub-shared-data-public')))
      pod.spec.containers[0].volume_mounts.append(dict(name='data-public',mountPath='/opt/app-root/src/shared-data/public',readOnly=readOnly_flag))

      # Private
      if spawner.user.name in private_users:
        pod.spec.volumes.append(dict(name='data-private',persistentVolumeClaim=dict(claimName='jupyterhub-shared-data-private')))
        pod.spec.containers[0].volume_mounts.append(dict(name='data-private',mountPath='/opt/app-root/src/shared-data/private',readOnly=readOnly_flag))

      # Secret
      if spawner.user.name in secret_users:
        pod.spec.volumes.append(dict(name='data-secret',persistentVolumeClaim=dict(claimName='jupyterhub-shared-data-secret')))
        pod.spec.containers[0].volume_mounts.append(dict(name='data-secret',mountPath='/opt/app-root/src/shared-data/secret',readOnly=readOnly_flag))

      # Function modify_pod_hook must return the pod instance
      return pod
 
    c.OpenShiftSpawner.modify_pod_hook = pvc_mounts
  
- op: replace
  path: /data/jupyterhub_admins
  value: "$(jupyterhub_admins)"

- op: replace
  path: /data/singleuser_pvc_size
  value: "$(singleuser_pvc_size)"
